#!/usr/bin/python
import os
import sys
import time
import json
import signal
import socket
import subprocess
from jinja2 import Template

CONFIG_FILE = "/etc/containersync.conf"
config = {
  "update_interval": 30,
  "machine_dir": "/var/lib/machines",
  "dest_dir": "/var/lib/containersync/machines",
  "port": 1030,
  "sync_running": True,
  "remote_hosts": [ ],
  "containers": { },
  "sync_interval": 30,
  "conf_template": "/usr/lib/containersync/lsyncd.conf.jinja",
  "lsyncd_conf_path": "/var/lib/containersync/lsyncd.conf",
  "exclude_containers": [ ],
}

with open(CONFIG_FILE, "r") as configFile:
  config.update(json.loads(configFile.read()))
config['remote_hosts'] = [x for x in config['remote_hosts'] if x != socket.gethostname()]

with open(config['conf_template'], "r") as lsyncdConfTemplateFile:
  lsyncdConfTemplate = lsyncdConfTemplateFile.read()

class Process:
  def __init__(self, cmd):
    self.cmd = cmd
    self.pid = subprocess.Popen(self.cmd).pid
    self.running = True

  def start(self):
    if not self.running:
      self.pid = subprocess.Popen(self.cmd).pid
      self.running = True

  def restart(self):
    print("Restarting lsyncd")
    self.stop()
    self.start()

  def stop(self):
    os.kill(self.pid, signal.SIGTERM)
    time.sleep(5)
    self.running = False

lsyncd = Process(["/usr/bin/lsyncd", config['lsyncd_conf_path']])

while True:
  time.sleep(config['update_interval'])
  currentSync = {}
  lockfiles = os.listdir(config['machine_dir'])
  lockfiles = [x[2:-4] for x in lockfiles if x[:2] == ".#" and x[-4:] == ".lck"]
  lockfiles = [x for x in lockfiles if os.path.isdir(os.path.join(config['machine_dir'], x))]
  if config['sync_running']:
    for container in lockfiles:
      if container in config['exclude_containers']:
        continue
      currentSync[container] = {
        "source": os.path.join(config['machine_dir'], container),
        "targets": [],
        "interval": config['sync_interval'],
      }
      for host in list(config['remote_hosts']):
        target = host+":"+os.path.join(config['dest_dir'], container)
        currentSync[container]['targets'].append(target)
  else:
    for container in lockfiles:
      if container in config['containers'].keys():
        currentSync[container] = {
          "source": "",
          "targets": [],
          "interval": 30,
        }
        currentSync[container].update(config['containers'][container])
  t = Template(lsyncdConfTemplate)
  lsyncdConf = t.render({"global": config, "containers": currentSync})
  currentConf = ""
  if os.path.isfile(config['lsyncd_conf_path']):
    with open(config['lsyncd_conf_path'], "r") as currentConfFile:
      currentConf = currentConfFile.read()
  if currentConf != lsyncdConf:
    if not os.path.isdir(os.path.dirname(config['lsyncd_conf_path'])):
      os.makedirs(os.path.dirname(config['lsyncd_conf_path']))
    with open(config['lsyncd_conf_path'], "w") as currentConfFile:
      currentConfFile.write(lsyncdConf)
    lsyncd.restart()
  lsyncd.start()

lsyncd.stop()
